-- simple printing words

"autoload/docstrings.eo" include

{ 10 emit } !nl
{ 7 emit } !bel

{ print nl } !println

{ _ swap doc! } !_doc!

{ } "..." def  -- no-op

{ { } if } !when
"when ( condition block -- )
If condition is true, execute the block, otherwise do nothing." _doc!

"autoload/loops.eo" include

{ !$stuff
  "" !$result
  $stuff { ->string $result swap append !>$result } each
  $result
} !conc
"conc ( stuff -- string )
Join the string representations of all objects in `stuff` together, producing
a single string." _doc!

-- and* ( cond1 cond2 -- )
-- `and` with shortcut mechanism. cond1 and cond2 must be code blocks.
{ !$cond2 !$cond1
  $cond1 exec
  { $cond2 exec } { false } if
} !and*
[ "logic" ] and*\tags!

-- or* ( cond1 cond2 -- )
-- `or` with shortcut mechanism. cond1 and cond2 must be code blocks.
{ !$cond2 !$cond1
  $cond1 exec
  { true } { $cond2 exec } if 
} !or*
[ "logic "] or*\tags!

-- for fun/completeness/because we can:
{ and not } !nand
{ or not } !nor

{ eq? not } !xor
"xor ( a b -- bool )
Returns true if only one of a and b is true." _doc!
[ "logic" ] xor\tags!

{ eq? } !eqv
"eqv ( a b -- bool )
Returns true if a and b are both true, or both false." _doc!
-- technically this is redundant
[ "logic " ] eqv\tags!

{ !$b !$a
  $a
  $a not $b not and
  or
} !imp
"imp ( a b -- bool )
Returns true if b is true, or both a and b are false." _doc!
[ "logic "] imp\tags!

--
-- comparison

{ eq? not } !neq?
"neq? ( a b -- bool )
Returns true if a and b are not equal (as compared with `eq?`)." _doc!

--
-- stack manipulation

{ !$temp exec $temp } !dip
"dip ( block x -- x )
Take x, execute the code block, put x back. 
(Borrowed from Cat.)" _doc!
[ "stack" ] dip\tags!

{ swap drop } !nip
"nip ( a b -- b )
Remove the element directly under the top element of the stack." _doc!
[ "stack" ] nip\tags!

{ swap over } !tuck
"tuck ( a b -- b a b )
Insert the top element of the stack into position #3 of the stack."
[ "stack" ] tuck\tags!

{ rol rol } !ror
"ror ( a b c -- c a b )
Rotate the topmost three elements of the stack to the right." _doc!
[ "stack" ] ror\tags!

{ !$n
  [ ] !$result
  { $result swap add! } $n do-times
  $result reverse
} !scoop
"scoop ( n -- list )
Take n items from the stack and return them as a list." _doc!
[ "stack" ] scoop\tags!

-- clear ( ? -- )
-- clear the stack
{ { stack-empty? not } { drop } while 
} !clear
"clear ( ? -- )
Clear the stack." _doc!
[ "stack "] clear\tags!

--
-- misc

-- empty? ( container -- bool )
-- Returns true if the given container (string, list, dict) is empty.
{ length 0 = } !empty?

-- is? ( a b -- bool )
-- Returns true if a and b refer to the same object internally.
--{ id swap id = } !is?
{ !$b !$a
  $a id $b id = } !is?
"is? ( a b -- bool )
Returns true if a and b refer to the same object internally." _doc!

-- create custom words from these type names
-- e.g. `int?` to check if something is an int, etc etc
--
[ "int" "string" "bool" "list" "dict" "u-word" "b-word" "module"
  "namespace" "block" "variable" "symbol" "regex" "null"
  ] !$TYPES
"All of Eo's built-in types." $TYPES\doc!

$TYPES { 
    !$type
    {   -- creating a new closure here, so we don't get namespace conflicts
        $type !$type
        -- create custom word
        -- e.g.: int? ( x -- bool )
        -- returns true if x is an int.
        $type "?" append !$wordname
        { type $type eq? } $wordname def  -- define the new word
        -- set custom doc string
        [ $wordname " ( x -- bool )" "\n"
          "Return true if x is of type " $type "." ] conc
        $wordname lookup-here swap doc!
        rootns $wordname $wordname lookup-here set!  -- stick in root namespace
    } exec
} each

{ !$x 
  $x u-word? $x b-word? or
} !word?

{ !$x
  $x string? $x list? or
} !sequence?

{ !$x
  [ "int" "string" "bool" "symbol" "null" "regex" "null" ] $x type contains?
} !atom?

{ atom? not } !container?

------

{ !$tag !$obj
  $obj tags $tag contains?
} !has-tag?
"has-tag? ( obj tag - bool )
Return true if obj has the given tag." _doc!

------

{ /\s+/ split* } !split
"split ( s -- parts )
Split a string by whitespace." _doc!

"autoload/experimental.eo" include

