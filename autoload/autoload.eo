-- simple printing words

{ 10 emit } "nl" def
{ 7 emit } "bel" def

{ print nl } "println" def

-- when ( condition block -- )
-- if condition is true, execute the block, otherwise do nothing.
{ { } if } !when

-- do-times ( block n -- )
-- execute the given block n times.
{ !$n !$block
  $n 0 > {
    $block exec               -- execute the code
    $block $n 1 - do-times    -- recurse with n-1
  } when
} !do-times

-- each ( list block -- )
-- execute the code block for each item in the list. (i.e. each item in the
-- list is pushed, then the block is executed to do something with it.)
{ $!block $!list
  { $!block $!list $!index
    -- if index falls within the list, process that item
    $index $list length < {
      $list $index index            -- push list[index] onto the stack
      $block exec                   -- execute block
      $index 1 + !>$index           -- index++
      $list $block $index each-aux  -- recurse
    } when
  } !each-aux
  $list $block 0 each-aux
} !each

-- ^
-- technically we don't need the outer $block and $list...
-- we do need to add:
-- 1. way to get the N-th element of a list
-- 2. way to get the length of a list
-- 3. <
-- NOTE: we don't need an accumulator here yet; we will for `map`.

