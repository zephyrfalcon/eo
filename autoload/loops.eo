-- loops.eo
-- Loop/iteration/mapping constructs.

{ !$n !$block
  $n 0 > {
    $block exec               -- execute the code
    $block $n 1 - do-times    -- recurse with n-1
  } when
} !do-times
"do-times ( block n -- )
Execute the given block n times." _doc!

{ !$block !$list
  -- each-aux ( list block index -- )
  { !$index !$block !$list
    -- if index falls within the list, process that item
    $list length $index > {
      $list $index lookup                -- push list[index] onto the stack
      $block exec                       -- execute block
      $list $block $index 1 + each-aux  -- recurse
    } when
  } !each-aux
  $list $block 0 each-aux
} !each
"each ( list block -- )
Execute the code block for each item in the list. (i.e. each item in the
list is pushed, then the block is executed to do something with it.)" _doc!

-- ^ NOTE: technically we don't need the outer $block and $list...
-- but it's more readable this way.

-- map ( list block -- list' )
-- execute the code block for each item in the list. the code expects the item
-- to be on the stack when it's called, and in return leaves a new item on the
-- stack, which will be added to the result list.
{ !$block !$list
  -- map-aux (list block index acc -- )
  { !$acc !$index !$block !$list
    $list length $index >    -- if we're still in the list...
    { $list $index lookup        -- push list[index] on the stack
      $block exec               -- execute block
      !$item                    -- take the result and call it $item
      $acc $item add!           -- add it to the accumulator (in-place)
      $list $block $index 1 + $acc map-aux  -- recurse
    }
    { $acc }                 -- otherwise push $acc, the result list
    if
  } !map-aux
  $list $block 0 [ ] map-aux
} !map

-- filter is now written in terms of `each`, much shorter and clearer ^_^
{ !$block !$list
  [ ] !$result
  $list { !$item
    $item $block exec            -- execute code block with item
    { $result $item add! } when  -- if condition met, add to result list
  } each
  $result
} !filter
"filter ( list block -- list' )
Execute the code block for each item in the list. Returns a new list with all
the items for which the code block returned true." _doc!

-- while ( cond-block exec-block -- )
-- while cond-block evaluates to true (i.e. leaves 'true' on the stack),
-- execute exec-block.
{ !$exec-block !$cond-block
  $cond-block exec                        -- check condition
  { $exec-block exec                      -- if true, exec exec-block
    $cond-block $exec-block while } when  -- recurse
} !while

{ !$code !$n2 !$n1
  $n1 !$counter
  { $counter $n2 < } 
  { $counter                   -- push counter
    $code exec                 -- execute code block
    $counter 1 + !>$counter    -- counter++
  } while
} !for
"for ( n1 n2 code -- )
Loops from n1 to n2 (excluding n2), pushing each number on the stack and
executing the code block." _doc!

{ !$n2 !$n1
  [ ] !$result
  $n1 $n2 { $result swap add! } for
  $result
} !range
"range ( n1 n2 -- [n1..n2-1] )
Create a list of numbers ranging from n1..n2, excluding n2." _doc!

{ !$code !$list
  0 $list length { 
    !$index
    $list $index lookup $index  -- push list[index] and index
    $code exec
  } for
} !for-each 
"for-each ( list code -- )
Loop over the list; for each item, push its index (starting from 0) and the
item itself, then execute the code block." _doc!


