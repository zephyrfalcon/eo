-- namespace tests

"ansi" import
ansi ns
ansi ns   -- these actually create two different EoNamespace objects
eq?       -- however...
=> [true]
ansi ns "fg" contains?
=> [true]
ansi ns "xyzzy" contains?
=> [false]

-- create empty namespace, add name "foo"
newns !$ns
$ns "foo" 42 set-raw!
$ns names
=> [[ "foo" ]]
$ns:foo  -- reader macro: getter
=> [42]

-- XXX this is no longer allowed
--99 $ns:!foo  -- reader macro: setter
--$ns:foo
--=> [99]

-- set! and foo:!bar syntax now expect code blocks
{ 1 1 + } $ns:!two
$ns:two
=> [2]

-- but set-raw! can still be used to mess things up, if you want :)
$ns "bogus" 66 set-raw!
$ns:bogus
=> [66]

-- create a new namespace with `thisns` as parent. then check if the parent
-- and `thisns` are equal.
thisns newns* !$ns
$ns parent
thisns 
eq?
=> [true]
thisns "dup" contains?
=> [true]

rootns parent
=> [null]

-- hairy stuff: find-caller-ns
1 !$a
-- foo is a nasty piece of work that looks in bar's namespace and changes the
-- value of $a
{ 2 !$b 
  "bar" find-caller-ns !$cns ... 44 $cns:!$a
  1 1 + } !foo
{ 3 !$c foo $a + } !bar
bar
=> [46]

-- no longer fails since `set!` wraps values in variables ^_^
4 !$a
5 thisns:!$a
$a
=> [5]

-- update now accepts variable objects
42 !$magic
thisns "$magic" get  -- pushes variable object
100 swap update      -- update the variable
$magic
=> [100]

-- there's also syntax for it:
144 thisns:!>$magic
$magic
=> [144]

